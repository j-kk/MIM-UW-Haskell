-- programs ------------------------------------------------

entrypoints Program ;

Program.   Program ::= [TopDef] ;

FnDef.	   TopDef ::= Type Ident "(" [Param] ")" Block ;

separator  nonempty TopDef "" ;

Param. 	   Param ::= Type Ident;

separator  Param "," ;

-- statements ----------------------------------------------

Block.     Block ::= "{" [Stmt] "}" ;

separator  Stmt "" ;

Empty.     Stmt ::= ";" ;

BStmt.     Stmt ::= Block ;

Decl.      Stmt ::= Type [Item] ";" ;

FDecl.     Stmt ::= TopDef ;

CDecl.     Stmt ::= "const" Type [Item] ";" ;

NoInit.    Item ::= Ident ; 

Init.      Item ::= Ident "=" Expr ;

separator  nonempty Item "," ;

Ass.       Stmt ::= Ident "=" Expr  ";" ;

Incr.      Stmt ::= Ident "++"  ";" ;

Decr.      Stmt ::= Ident "--"  ";" ;

Ret.       Stmt ::= "return" Expr ";" ;

VRet.      Stmt ::= "return" ";" ;

While.     Stmt ::= "while" "(" Expr ")" Stmt ;

For.       Stmt ::= "for" "(" Ident "=" Expr "to" Expr ")" Stmt ;

SExp.      Stmt ::= Expr  ";" ;

Break.     Stmt ::= "break" ";" ;

Continue.  Stmt ::= "continue" ";" ; 

Println.   Stmt ::= "println" "(" Expr ")" ;

Print.     Stmt ::= "print" "(" Expr ")" ;

-- If and Elif ---------------------------------------------

CondS.     Stmt ::= "if" "(" Expr ")" Block;

CondE.     Stmt ::= "if" "(" Expr ")" Block "else" Block;

CondC.     Stmt ::= "if" "(" Expr ")" Block ECond;

ECondS.    ECond ::= "elif" "(" Expr ")" Block;

ECondE.    ECond ::= "elif" "(" Expr ")" Block "else" Block;

ECondC.    ECond ::= "elif" "(" Expr ")" Block ECond;

separator  ECond "";

-- Types ---------------------------------------------------

Int.       Type ::= "int" ;

Str.       Type ::= "string" ;

Bool.      Type ::= "bool" ;

Void.      Type ::= "void" ;

internal   Fun. Type ::= Type "(" [Type] ")" ;

separator  Type "," ;

-- Passing arguments ---------------------------------------

VArg.      Arg ::= Expr;

PArg. 	   Arg ::= "&"Ident;

separator  Arg "," ;

-- Expressions ---------------------------------------------

EVar.      Expr6 ::= Ident ;

ELitInt.   Expr6 ::= Integer ;

ELitTrue.  Expr6 ::= "True" ;

ELitFalse. Expr6 ::= "False" ;

EApp.      Expr6 ::= Ident "(" [Arg] ")" ;

EString.   Expr6 ::= String ;

Neg.       Expr5 ::= "-" Expr6 ;

Not.       Expr5 ::= "!" Expr6 ;

EMul.      Expr4 ::= Expr4 MulOp Expr5 ;

EAdd.      Expr3 ::= Expr3 AddOp Expr4 ;

ERel.      Expr2 ::= Expr2 RelOp Expr3 ;

EAnd.      Expr1 ::= Expr2 "&&" Expr1 ;

EOr.       Expr ::= Expr1 "||" Expr ;

coercions  Expr 6 ;

separator  Expr "," ;


-- operators -----------------------------------------------

Plus.      AddOp ::= "+" ;

Minus.     AddOp ::= "-" ;

Times.     MulOp ::= "*" ;

Div.       MulOp ::= "/" ;

Mod.       MulOp ::= "%" ;

LTH.       RelOp ::= "<" ;

LE.        RelOp ::= "<=" ;

GTH.       RelOp ::= ">" ;

GE.        RelOp ::= ">=" ;

EQU.       RelOp ::= "==" ;

NE.        RelOp ::= "!=" ;

-- comments ------------------------------------------------

comment    "#" ;

comment    "//" ;

comment    "/*" "*/" ;

