-- This Happy file was machine-generated by the BNF converter
{
{-# OPTIONS_GHC -fno-warn-incomplete-patterns -fno-warn-overlapping-patterns #-}
module ParBing
  ( happyError
  , myLexer
  , pProgram
  ) where

import Prelude

import qualified AbsBing
import LexBing

}

%name pProgram Program
-- no lexer declaration
%monad { Err } { (>>=) } { return }
%tokentype {Token}
%token
  '!' { PT _ (TS _ 1) }
  '!=' { PT _ (TS _ 2) }
  '%' { PT _ (TS _ 3) }
  '&' { PT _ (TS _ 4) }
  '&&' { PT _ (TS _ 5) }
  '(' { PT _ (TS _ 6) }
  ')' { PT _ (TS _ 7) }
  '*' { PT _ (TS _ 8) }
  '+' { PT _ (TS _ 9) }
  '++' { PT _ (TS _ 10) }
  ',' { PT _ (TS _ 11) }
  '-' { PT _ (TS _ 12) }
  '--' { PT _ (TS _ 13) }
  '/' { PT _ (TS _ 14) }
  ';' { PT _ (TS _ 15) }
  '<' { PT _ (TS _ 16) }
  '<=' { PT _ (TS _ 17) }
  '=' { PT _ (TS _ 18) }
  '==' { PT _ (TS _ 19) }
  '>' { PT _ (TS _ 20) }
  '>=' { PT _ (TS _ 21) }
  'False' { PT _ (TS _ 22) }
  'True' { PT _ (TS _ 23) }
  'bool' { PT _ (TS _ 24) }
  'break' { PT _ (TS _ 25) }
  'const' { PT _ (TS _ 26) }
  'continue' { PT _ (TS _ 27) }
  'elif' { PT _ (TS _ 28) }
  'else' { PT _ (TS _ 29) }
  'for' { PT _ (TS _ 30) }
  'if' { PT _ (TS _ 31) }
  'int' { PT _ (TS _ 32) }
  'print' { PT _ (TS _ 33) }
  'println' { PT _ (TS _ 34) }
  'return' { PT _ (TS _ 35) }
  'string' { PT _ (TS _ 36) }
  'to' { PT _ (TS _ 37) }
  'void' { PT _ (TS _ 38) }
  'while' { PT _ (TS _ 39) }
  '{' { PT _ (TS _ 40) }
  '||' { PT _ (TS _ 41) }
  '}' { PT _ (TS _ 42) }
  L_Ident  { PT _ (TV $$) }
  L_integ  { PT _ (TI $$) }
  L_quoted { PT _ (TL $$) }

%%

Ident :: { AbsBing.Ident }
Ident  : L_Ident { AbsBing.Ident $1 }

Integer :: { Integer }
Integer  : L_integ  { (read $1) :: Integer }

String  :: { String }
String   : L_quoted { $1 }

Program :: { AbsBing.Program }
Program : ListTopDef { AbsBing.Program $1 }

TopDef :: { AbsBing.TopDef }
TopDef : Type Ident '(' ListParam ')' Block { AbsBing.FnDef $1 $2 $4 $6 }

ListTopDef :: { [AbsBing.TopDef] }
ListTopDef : TopDef { (:[]) $1 } | TopDef ListTopDef { (:) $1 $2 }

Param :: { AbsBing.Param }
Param : Type Ident { AbsBing.Param $1 $2 }

ListParam :: { [AbsBing.Param] }
ListParam : {- empty -} { [] }
          | Param { (:[]) $1 }
          | Param ',' ListParam { (:) $1 $3 }

Block :: { AbsBing.Block }
Block : '{' ListStmt '}' { AbsBing.Block $2 }

ListStmt :: { [AbsBing.Stmt] }
ListStmt : {- empty -} { [] } | Stmt ListStmt { (:) $1 $2 }

Stmt :: { AbsBing.Stmt }
Stmt : ';' { AbsBing.Empty }
     | Block { AbsBing.BStmt $1 }
     | Type ListItem ';' { AbsBing.Decl $1 $2 }
     | TopDef { AbsBing.FDecl $1 }
     | 'const' Type ListItem ';' { AbsBing.CDecl $2 $3 }
     | Ident '=' Expr ';' { AbsBing.Ass $1 $3 }
     | Ident '++' ';' { AbsBing.Incr $1 }
     | Ident '--' ';' { AbsBing.Decr $1 }
     | 'return' Expr ';' { AbsBing.Ret $2 }
     | 'return' ';' { AbsBing.VRet }
     | 'while' '(' Expr ')' Stmt { AbsBing.While $3 $5 }
     | 'for' '(' Ident '=' Expr 'to' Expr ')' Stmt { AbsBing.For $3 $5 $7 $9 }
     | Expr ';' { AbsBing.SExp $1 }
     | 'break' ';' { AbsBing.Break }
     | 'continue' ';' { AbsBing.Continue }
     | 'println' '(' Expr ')' { AbsBing.Println $3 }
     | 'print' '(' Expr ')' { AbsBing.Print $3 }
     | 'if' '(' Expr ')' Block { AbsBing.CondS $3 $5 }
     | 'if' '(' Expr ')' Block 'else' Block { AbsBing.CondE $3 $5 $7 }
     | 'if' '(' Expr ')' Block ECond { AbsBing.CondC $3 $5 $6 }

Item :: { AbsBing.Item }
Item : Ident { AbsBing.NoInit $1 }
     | Ident '=' Expr { AbsBing.Init $1 $3 }

ListItem :: { [AbsBing.Item] }
ListItem : Item { (:[]) $1 } | Item ',' ListItem { (:) $1 $3 }

ECond :: { AbsBing.ECond }
ECond : 'elif' '(' Expr ')' Block { AbsBing.ECondS $3 $5 }
      | 'elif' '(' Expr ')' Block 'else' Block { AbsBing.ECondE $3 $5 $7 }
      | 'elif' '(' Expr ')' Block ECond { AbsBing.ECondC $3 $5 $6 }

ListECond :: { [AbsBing.ECond] }
ListECond : {- empty -} { [] } | ECond ListECond { (:) $1 $2 }

Type :: { AbsBing.Type }
Type : 'int' { AbsBing.Int }
     | 'string' { AbsBing.Str }
     | 'bool' { AbsBing.Bool }
     | 'void' { AbsBing.Void }

ListType :: { [AbsBing.Type] }
ListType : {- empty -} { [] }
         | Type { (:[]) $1 }
         | Type ',' ListType { (:) $1 $3 }

Arg :: { AbsBing.Arg }
Arg : Expr { AbsBing.VArg $1 } | '&' Ident { AbsBing.PArg $2 }

ListArg :: { [AbsBing.Arg] }
ListArg : {- empty -} { [] }
        | Arg { (:[]) $1 }
        | Arg ',' ListArg { (:) $1 $3 }

Expr6 :: { AbsBing.Expr }
Expr6 : Ident { AbsBing.EVar $1 }
      | Integer { AbsBing.ELitInt $1 }
      | 'True' { AbsBing.ELitTrue }
      | 'False' { AbsBing.ELitFalse }
      | Ident '(' ListArg ')' { AbsBing.EApp $1 $3 }
      | String { AbsBing.EString $1 }
      | '(' Expr ')' { $2 }

Expr5 :: { AbsBing.Expr }
Expr5 : '-' Expr6 { AbsBing.Neg $2 }
      | '!' Expr6 { AbsBing.Not $2 }
      | Expr6 { $1 }

Expr4 :: { AbsBing.Expr }
Expr4 : Expr4 MulOp Expr5 { AbsBing.EMul $1 $2 $3 } | Expr5 { $1 }

Expr3 :: { AbsBing.Expr }
Expr3 : Expr3 AddOp Expr4 { AbsBing.EAdd $1 $2 $3 } | Expr4 { $1 }

Expr2 :: { AbsBing.Expr }
Expr2 : Expr2 RelOp Expr3 { AbsBing.ERel $1 $2 $3 } | Expr3 { $1 }

Expr1 :: { AbsBing.Expr }
Expr1 : Expr2 '&&' Expr1 { AbsBing.EAnd $1 $3 } | Expr2 { $1 }

Expr :: { AbsBing.Expr }
Expr : Expr1 '||' Expr { AbsBing.EOr $1 $3 } | Expr1 { $1 }

ListExpr :: { [AbsBing.Expr] }
ListExpr : {- empty -} { [] }
         | Expr { (:[]) $1 }
         | Expr ',' ListExpr { (:) $1 $3 }

AddOp :: { AbsBing.AddOp }
AddOp : '+' { AbsBing.Plus } | '-' { AbsBing.Minus }

MulOp :: { AbsBing.MulOp }
MulOp : '*' { AbsBing.Times }
      | '/' { AbsBing.Div }
      | '%' { AbsBing.Mod }

RelOp :: { AbsBing.RelOp }
RelOp : '<' { AbsBing.LTH }
      | '<=' { AbsBing.LE }
      | '>' { AbsBing.GTH }
      | '>=' { AbsBing.GE }
      | '==' { AbsBing.EQU }
      | '!=' { AbsBing.NE }
{

type Err = Either String

happyError :: [Token] -> Err a
happyError ts = Left $
  "syntax error at " ++ tokenPos ts ++
  case ts of
    []      -> []
    [Err _] -> " due to lexer error"
    t:_     -> " before `" ++ (prToken t) ++ "'"

myLexer :: String -> [Token]
myLexer = tokens

}

